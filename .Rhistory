keyword_co = networkPlot(NetMatrix_keyword_co, normalize = "association", weighted = NULL, n = nrow(data), Title = "Keyword Co-Occurrences", type = "fruchterman", size = TRUE, edgesize = 2.5, labelsize = 1)
library(bibliometrix)
library(rprojroot)
root_file <- find_rstudio_root_file()
setwd(root_file)
data <- convert2df("data/database1.bib", dbsource = "scopus", format = "bibtex")
# Set the working directory to locate files
setwd(find_rstudio_root_file())
# Convert bibliographic data from .bib format to a data frame
data <- convert2df("data/database1.bib", dbsource = "scopus", format = "bibtex")
# Perform a bibliometric analysis
result <- biblioAnalysis(data)
# Display a summary of the results
summary(result)
# Generate plots of the bibliometric analysis
plot(x = result)
objects<-ls()
plot<-objects
plots
# Generate plots of the bibliometric analysis
plot(x = result)
objects<-ls()
plots<-objects
plots
# Generate plots of the bibliometric analysis
plot(x = result)
objects<-ls()
plots<-objects
plots
lapply(plots,function(x){ggsave(file=paste(x,"tif",sep="."),get(x))})
library(bibliometrix)
library(rprojroot)
library(ggplot2)
root_file <- find_rstudio_root_file()
setwd(root_file)
data <- convert2df("data/database1.bib", dbsource = "scopus", format = "bibtex")
# Set the working directory to locate files
setwd(find_rstudio_root_file())
# Convert bibliographic data from .bib format to a data frame
data <- convert2df("data/database1.bib", dbsource = "scopus", format = "bibtex")
# Perform a bibliometric analysis
result <- biblioAnalysis(data)
# Display a summary of the results
summary(result)
# Generate plots of the bibliometric analysis
plot(x = result)
objects<-ls()
plots<-objects
plots
lapply(plots,function(x){ggsave(file=paste(x,"tif",sep="."),get(x))})
# Generate plots of the bibliometric analysis
plot(x = result)
objects<-ls()
plots<-objects
plots
lapply(plots,function(x){ggsave(file=paste(x,"tif",sep="."), width = 3500, height = 1500, units = "px", dpi = 300, compression = "lza", get(x))})
# Generate plots of the bibliometric analysis
plot(x = result)
objects<-ls()
plots<-objects
plots
lapply(plots,function(x){ggsave(file=paste(x,"tif",sep="."), width = 3500, height = 1500, units = "px", dpi = 300, compression = "lzw", get(x))})
# Lista los objetos gráficos en el entorno
objects <- ls()
plots <- Filter(function(x) inherits(get(x), "ggplot"), objects)  # Filtra objetos ggplot
# Guarda cada gráfico en formato TIFF
lapply(plots, function(plot_name) {
plot_object <- get(plot_name)  # Obtiene el gráfico
ggsave(
filename = paste0(plot_name, ".tif"),  # Nombre del archivo
plot = plot_object,  # Gráfico a guardar
width = 3500,  # Ancho en px
height = 1500,  # Alto en px
units = "px",  # Unidades de medida
dpi = 300,  # Resolución
device = "tiff",  # Formato de salida
compression = "lzw"  # Compresión
)
})
# Lista los objetos gráficos en el entorno
objects <- ls()
plots <- Filter(function(x) inherits(get(x), "ggplot"), objects)  # Filtra objetos ggplot
# Guarda cada gráfico en formato TIFF
lapply(plots, function(plot_name) {
plot_object <- get(plot_name)  # Obtiene el gráfico
ggsave(
filename = paste0(plot_name, ".tif"),  # Nombre del archivo
plot = plot_object,  # Gráfico a guardar
width = 3500,  # Ancho en px
height = 1500,  # Alto en px
units = "px",  # Unidades de medida
dpi = 300,  # Resolución
device = "tiff",  # Formato de salida
compression = "lzw"  # Compresión
)
})
Filter(function(x) inherits(get(x), "ggplot"), objects)
# Generate plots of the bibliometric analysis
plot(x = result)
objects<-ls()
plots<-objects
plots
lapply(plots,function(x){ggsave(file=paste(x,"tif",sep="."), width = 3500, height = 1500, units = "px", dpi = 300, compression = "lzw", get(x))})
plots
str(plots)
typeof(plots)
# Supongamos que 'result' es el objeto que contiene la lista de gráficos ggplot
plots <- plot(x = result)  # Esto devuelve una lista de ggplot
# Verifica si los elementos son de clase ggplot
if (all(sapply(plots, function(p) inherits(p, "ggplot")))) {
# Guarda cada gráfico como TIFF
lapply(seq_along(plots), function(i) {
ggsave(
filename = paste0("plot_", i, ".tif"),  # Genera un nombre único para cada archivo
plot = plots[[i]],  # Selecciona el gráfico en la lista
width = 3500 / 300,  # Ancho en pulgadas (px / dpi)
height = 1500 / 300,  # Alto en pulgadas (px / dpi)
units = "in",  # Cambia unidades a pulgadas
dpi = 300,  # Resolución
device = "tiff",  # Formato de salida
compression = "lzw"  # Compresión
)
})
} else {
stop("Error: La lista no contiene objetos de clase ggplot.")
}
# Generate plots of the bibliometric analysis
plots <- plot(x = result)
lapply(seq_along(plots), function(i) {
ggsave(
filename = paste0("figures/plot_", i, ".tif"),
plot = plots[[i]],
width = 3500 / 300,
height = 1500 / 300,
units = "in",
dpi = 300,
device = "tiff",
compression = "lzw")})
# Perform conceptual structure analysis using keywords
CS <- conceptualStructure(data, field = "ID", method = "CA", minDegree = 3, clust = 4, stemming = FALSE, labelsize = 10, documents = nrow(data))
# Generate plots of the bibliometric analysis
plots <- plot(x = result)
lapply(seq_along(plots), function(i) {
ggsave(
filename = paste0("figures/plot_analysis_", i, ".tif"),
plot = plots[[i]],
width = 3500 / 300,
height = 1500 / 300,
units = "in",
dpi = 300,
device = "tiff",
compression = "lzw")})
# Perform conceptual structure analysis using keywords
CS <- conceptualStructure(data, field = "ID", method = "CA", minDegree = 3, clust = 4, stemming = FALSE, labelsize = 10, documents = nrow(data))
# Perform conceptual structure analysis using keywords
CS <- conceptualStructure(data, field = "ID", method = "CA", minDegree = 3, clust = 4, stemming = FALSE, labelsize = 10, documents = nrow(data))
lapply(seq_along(CS), function(i) {
ggsave(
filename = paste0("figures/plot_conceptual_structure_", i, ".tif"),
plot = plots[[i]],
width = 3500 / 300,
height = 1500 / 300,
units = "in",
dpi = 300,
device = "tiff",
compression = "lzw")})
# Perform conceptual structure analysis using keywords
CS <- conceptualStructure(data, field = "ID", method = "CA", minDegree = 3, clust = 4, stemming = FALSE, labelsize = 10, documents = nrow(data))
lapply(seq_along(CS), function(i) {
ggsave(
filename = paste0("figures/plot_conceptual_structure_", i, ".tif"),
plot = CS[[i]],
width = 3500 / 300,
height = 1500 / 300,
units = "in",
dpi = 300,
device = "tiff",
compression = "lzw")})
# Perform conceptual structure analysis using keywords
CS <- conceptualStructure(data, field = "ID", method = "CA", minDegree = 3, clust = 4, stemming = FALSE, labelsize = 10, documents = nrow(data))
# Perform conceptual structure analysis using keywords
CS <- conceptualStructure(data, field = "ID", method = "CA", minDegree = 3, clust = 4, stemming = FALSE, labelsize = 10, documents = nrow(data))
plots <- plot(CS)
CS <- conceptualStructure(data, field = "ID", method = "CA", minDegree = 3, clust = 4, stemming = FALSE, labelsize = 10, documents = nrow(data))
plots <- plot(CS)
CS <- conceptualStructure(data, field = "ID", method = "CA", minDegree = 3, clust = 4, stemming = FALSE, labelsize = 10, documents = nrow(data))
plots <- plot(CS)
CS <- conceptualStructure(data, field = "ID", method = "CA", minDegree = 3, clust = 4, stemming = FALSE, labelsize = 10, documents = nrow(data))
# Inspecciona la estructura del objeto CS
str(CS)
# Si los gráficos están en un componente específico, como CS$plots
plots <- CS$plots  # Ajusta según el nombre real del componente
if (!dir.exists("figures")) {
dir.create("figures")
}
lapply(seq_along(plots), function(i) {
ggsave(
filename = paste0("figures/plot_", i, ".tif"),
plot = plots[[i]],
width = 3500 / 300,
height = 1500 / 300,
units = "in",
dpi = 300,
device = "tiff",
compression = "lzw"
)
})
View(CS)
CS <- conceptualStructure(data, field = "ID", method = "CA", minDegree = 3, clust = 4, stemming = FALSE, labelsize = 10, documents = nrow(data))
# Inspecciona la estructura del objeto CS
str(CS)
# Si los gráficos están en un componente específico, como CS$plots
plots <- CS$plots  # Ajusta según el nombre real del componente
if (!dir.exists("figures")) {
dir.create("figures")
}
lapply(seq_along(plots), function(i) {
ggsave(
filename = paste0("figures/plotCS_", i, ".tif"),
plot = plots[[i]],
width = 3500 / 300,
height = 1500 / 300,
units = "in",
dpi = 300,
device = "tiff",
compression = "lzw"
)
})
# Perform conceptual structure analysis using keywords
CS <- conceptualStructure(data, field = "ID", method = "CA", minDegree = 3, clust = 4, stemming = FALSE, labelsize = 10, documents = nrow(data))
plots <- plot(CS)
net
res
km.res
CS <- conceptualStructure(data, field = "ID", method = "CA", minDegree = 3, clust = 4, stemming = FALSE, labelsize = 10, documents = nrow(data))
# Extrae los gráficos de CS
plots <- list(
graph_terms = CS$graph_terms,
graph_documents_Contrib = CS$graph_documents_Contrib,
graph_documents_TC = CS$graph_documents_TC
)
if (!dir.exists("figures")) {
dir.create("figures")
}
# Guarda cada gráfico como TIFF
lapply(names(plots), function(name) {
ggsave(
filename = paste0("figures/", name, ".tif"),
plot = plots[[name]],
width = 3500 / 300,
height = 1500 / 300,
units = "in",
dpi = 300,
device = "tiff",
compression = "lzw"
)
})
# Perform conceptual structure analysis using keywords
CS <- conceptualStructure(data, field = "ID", method = "CA", minDegree = 3, clust = 4, stemming = FALSE, labelsize = 10, documents = nrow(data))
plots <- list(
graph_terms = CS$graph_terms,
graph_documents_Contrib = CS$graph_documents_Contrib,
graph_documents_TC = CS$graph_documents_TC
)
if (!dir.exists("figures")) {
dir.create("figures")
}
lapply(names(plots), function(name) {
ggsave(
filename = paste0("figures/", name, ".tif"),
plot = plots[[name]],
width = 3500 / 300,
height = 1500 / 300,
units = "in",
dpi = 300,
device = "tiff",
compression = "lzw"
)
})
# Rename the author column (if necessary)
colnames(data)[colnames(data) == "AU"] <- "CR_AU"
# Create a network matrix for author co-citation
NetMatrix_citation_cc <- biblioNetwork(data, analysis = "co-citation", network = "authors", sep = ";")
# Plot the author co-citation network
co_citation = networkPlot(NetMatrix_citation_cc, normalize = "association", weighted = NULL, n = nrow(data), Title = "Author Co-Citation Network", type = "fruchterman", size = TRUE, edgesize = 2.5, labelsize = 1)
# Create a network matrix for keyword co-occurrences
NetMatrix_keyword_co <- biblioNetwork(data, analysis = "co-occurrences", network = "keywords", sep = ";")
# Plot the keyword co-occurrence network
keyword_co = networkPlot(NetMatrix_keyword_co, normalize = "association", weighted = NULL, n = nrow(data), Title = "Keyword Co-Occurrences", type = "fruchterman", size = TRUE, edgesize = 2.5, labelsize = 1)
# Rename the author column (if necessary)
colnames(data)[colnames(data) == "AU"] <- "CR_AU"
# Create a network matrix for author co-citation
NetMatrix_citation_cc <- biblioNetwork(data, analysis = "co-citation", network = "authors", sep = ";")
# Plot the author co-citation network
co_citation = networkPlot(NetMatrix_citation_cc, normalize = "association", weighted = NULL, n = nrow(data), Title = "Author Co-Citation Network", type = "fruchterman", size = TRUE, edgesize = 2.5, labelsize = 1)
ggsave(
filename = "figures/co_citation_network.tif",
plot = co_citation,
width = 3500 / 300,
height = 1500 / 300,
units = "in",
dpi = 300,
device = "tiff",
compression = "lzw"
)
str(co_citation)
library(igraph)
library(ggraph)
install.packages("ggraph")
library(igraph)
library(ggraph)
# Generar el grafo usando networkPlot
co_citation <- networkPlot(
NetMatrix_citation_cc,
normalize = "association",
weighted = NULL,
n = nrow(data),
Title = "Author Co-Citation Network",
type = "fruchterman",
size = TRUE,
edgesize = 2.5,
labelsize = 1
)
# Extraer el grafo
graph <- co_citation$graph
# Usar ggraph para visualizar el grafo
plot_graph <- ggraph(graph, layout = "fr") +
geom_edge_link(aes(width = weight), edge_colour = "gray") +
geom_node_point(aes(size = degree(graph)), color = "blue") +
geom_node_text(aes(label = name), repel = TRUE, size = 2) +
theme_minimal()
# Crear el directorio 'figures' si no existe
if (!dir.exists("figures")) {
dir.create("figures")
}
# Guardar el gráfico como TIFF
ggsave(
filename = "figures/co_citation_network.tif",
plot = plot_graph,
width = 3500 / 300,
height = 1500 / 300,
units = "in",
dpi = 300,
device = "tiff",
compression = "lzw"
)
library(igraph)
library(ggraph)
# Obtener el grafo desde networkPlot
co_citation <- networkPlot(
NetMatrix_citation_cc,
normalize = "association",
weighted = NULL,
n = nrow(data),
Title = "Author Co-Citation Network",
type = "fruchterman",
size = TRUE,
edgesize = 2.5,
labelsize = 1
)
# Extraer el grafo
graph <- co_citation$graph
# Inspeccionar los atributos de las aristas
E(graph)
# Si el atributo 'weight' no está disponible, puedes ajustar el gráfico eliminando 'weight'
# Usar ggraph para visualizar el grafo
plot_graph <- ggraph(graph, layout = "fr") +
geom_edge_link(edge_colour = "gray") +  # Eliminar 'weight' si no existe
geom_node_point(aes(size = degree(graph)), color = "blue") +
geom_node_text(aes(label = name), repel = TRUE, size = 2) +
theme_minimal()
# Crear el directorio 'figures' si no existe
if (!dir.exists("figures")) {
dir.create("figures")
}
# Guardar el gráfico como TIFF
ggsave(
filename = "figures/co_citation_network.tif",
plot = plot_graph,
width = 3500 / 300,
height = 1500 / 300,
units = "in",
dpi = 300,
device = "tiff",
compression = "lzw"
)
# Create a network matrix for keyword co-occurrences
NetMatrix_keyword_co <- biblioNetwork(data, analysis = "co-occurrences", network = "keywords", sep = ";")
# Plot the keyword co-occurrence network
keyword_co = networkPlot(NetMatrix_keyword_co, normalize = "association", weighted = NULL, n = nrow(data), Title = "Keyword Co-Occurrences", type = "fruchterman", size = TRUE, edgesize = 2.5, labelsize = 1)
# Create a network matrix for keyword co-occurrences
NetMatrix_keyword_co <- biblioNetwork(data, analysis = "co-occurrences", network = "keywords", sep = ";")
# Plot the keyword co-occurrence network
keyword_co = networkPlot(NetMatrix_keyword_co, normalize = "association", weighted = NULL, n = nrow(data), Title = "Keyword Co-Occurrences", type = "fruchterman", size = TRUE, edgesize = 2.5, labelsize = 1)
tiff("figures/keyword_co_occurrence_network.tif", width = 1000, height = 750, units = "px", res = 300, compression = "lzw")
# Create a network matrix for keyword co-occurrences
NetMatrix_keyword_co <- biblioNetwork(data, analysis = "co-occurrences", network = "keywords", sep = ";")
# Plot the keyword co-occurrence network
keyword_co = networkPlot(NetMatrix_keyword_co, normalize = "association", weighted = NULL, n = nrow(data), Title = "Keyword Co-Occurrences", type = "fruchterman", size = TRUE, edgesize = 2.5, labelsize = 1)
tiff("figures/keyword_co_occurrence_network.tif", width = 3500, height = 1500, units = "px", res = 300, compression = "lzw")
# Create a network matrix for keyword co-occurrences
NetMatrix_keyword_co <- biblioNetwork(data, analysis = "co-occurrences", network = "keywords", sep = ";")
# Plot the keyword co-occurrence network
keyword_co = networkPlot(NetMatrix_keyword_co, normalize = "association", weighted = NULL, n = nrow(data), Title = "Keyword Co-Occurrences", type = "fruchterman", size = TRUE, edgesize = 2.5, labelsize = 1)
tiff("figures/keyword_co_occurrence_network.tif", width = 3500, height = 1500, units = "px", res = 300, compression = "lzw")
# Create a network matrix for keyword co-occurrences
NetMatrix_keyword_co <- biblioNetwork(data, analysis = "co-occurrences", network = "keywords", sep = ";")
# Plot the keyword co-occurrence network
keyword_co = networkPlot(NetMatrix_keyword_co, normalize = "association", weighted = NULL, n = nrow(data), Title = "Keyword Co-Occurrences", type = "fruchterman", size = TRUE, edgesize = 2.5, labelsize = 1)
tiff("figures/keyword_co_occurrence_network.tif", width = 3500, height = 1500, units = "px", res = 300, compression = "lzw")
# Create a network matrix for keyword co-occurrences
NetMatrix_keyword_co <- biblioNetwork(data, analysis = "co-occurrences", network = "keywords", sep = ";")
# Plot the keyword co-occurrence network
keyword_co = networkPlot(NetMatrix_keyword_co, normalize = "association", weighted = NULL, n = nrow(data), Title = "Keyword Co-Occurrences", type = "fruchterman", size = TRUE, edgesize = 2.5, labelsize = 1)
tiff("figures/keyword_co_occurrences_network.tif", width = 3500, height = 1500, units = "px", res = 300, compression = "lzw")
keyword_co = networkPlot(NetMatrix_keyword_co, normalize = "association", weighted = NULL, n = nrow(data), Title = "Keyword Co-Occurrences", type = "fruchterman", size = TRUE, edgesize = 2.5, labelsize = 1)
# Crear la matriz de la red de co-ocurrencias de palabras clave
NetMatrix_keyword_co <- biblioNetwork(data, analysis = "co-occurrences", network = "keywords", sep = ";")
# Abrir el dispositivo TIFF para guardar el archivo con un DPI de 300
tiff("figures/keyword_co_occurrence_network.tif", width = 1000, height = 750, units = "px", res = 300, compression = "lzw")
# Generar el gráfico de la red de co-ocurrencias de palabras clave
keyword_co = networkPlot(NetMatrix_keyword_co, normalize = "association", weighted = NULL, n = nrow(data), Title = "Keyword Co-Occurrences", type = "fruchterman", size = TRUE, edgesize = 2.5, labelsize = 1)
# Cerrar el dispositivo de gráficos para guardar el archivo
dev.off()
# Crear la matriz de la red de co-ocurrencias de palabras clave
NetMatrix_keyword_co <- biblioNetwork(data, analysis = "co-occurrences", network = "keywords", sep = ";")
# Abrir el dispositivo TIFF para guardar el archivo con un DPI de 300
tiff("figures/keyword_co_occurrence_network.tif", width = 1000, height = 750, units = "px", res = 300, compression = "lzw")
# Generar el gráfico de la red de co-ocurrencias de palabras clave
keyword_co = networkPlot(NetMatrix_keyword_co, normalize = "association", weighted = NULL, n = nrow(data), Title = "Keyword Co-Occurrences", type = "fruchterman", size = TRUE, edgesize = 2.5, labelsize = 0.1)
# Cerrar el dispositivo de gráficos para guardar el archivo
dev.off()
# Create a network matrix for keyword co-occurrences
NetMatrix_keyword_co <- biblioNetwork(data, analysis = "co-occurrences", network = "keywords", sep = ";")
# Plot the keyword co-occurrence network
keyword_co = networkPlot(NetMatrix_keyword_co, normalize = "association", weighted = NULL, n = nrow(data), Title = "Keyword Co-Occurrences", type = "fruchterman", size = TRUE, edgesize = 2.5, labelsize = 1)
tiff("figures/keyword_co_occurrences_network.tif", width = 3500/300, height = 1500/300, units = "px", res = 300, compression = "lzw")
keyword_co = networkPlot(NetMatrix_keyword_co, normalize = "association", weighted = NULL, n = nrow(data), Title = "Keyword Co-Occurrences", type = "fruchterman", size = TRUE, edgesize = 2.5, labelsize = 1)
# Crear la matriz de la red de co-ocurrencias de palabras clave
NetMatrix_keyword_co <- biblioNetwork(data, analysis = "co-occurrences", network = "keywords", sep = ";")
# Abrir el dispositivo TIFF para guardar el archivo con un DPI de 300
tiff("figures/keyword_co_occurrence_network.tif", width = 1000/300, height = 750/300, units = "px", res = 300, compression = "lzw")
# Generar el gráfico de la red de co-ocurrencias de palabras clave
keyword_co = networkPlot(NetMatrix_keyword_co, normalize = "association", weighted = NULL, n = nrow(data), Title = "Keyword Co-Occurrences", type = "fruchterman", size = TRUE, edgesize = 2.5, labelsize = 1)
# Rename the author column (if necessary)
colnames(data)[colnames(data) == "AU"] <- "CR_AU"
# Create a network matrix for author co-citation
NetMatrix_citation_cc <- biblioNetwork(data, analysis = "co-citation", network = "authors", sep = ";")
# Plot the author co-citation network
co_citation = networkPlot(NetMatrix_citation_cc, normalize = "association", weighted = NULL, n = nrow(data), Title = "Author Co-Citation Network", type = "fruchterman", size = TRUE, edgesize = 2.5, labelsize = 1)
# Rename the author column (if necessary)
colnames(data)[colnames(data) == "AU"] <- "CR_AU"
# Create a network matrix for author co-citation
NetMatrix_citation_cc <- biblioNetwork(data, analysis = "co-citation", network = "authors", sep = ";")
# Plot the author co-citation network
co_citation = networkPlot(NetMatrix_citation_cc, normalize = "association", weighted = NULL, n = nrow(data), Title = "Author Co-Citation Network", type = "fruchterman", size = TRUE, edgesize = 2.5, labelsize = 1)
# Rename the author column (if necessary)
colnames(data)[colnames(data) == "AU"] <- "CR_AU"
# Create a network matrix for author co-citation
NetMatrix_citation_cc <- biblioNetwork(data, analysis = "co-citation", network = "authors", sep = ";")
# Plot the author co-citation network
co_citation = networkPlot(NetMatrix_citation_cc, normalize = "association", weighted = NULL, n = nrow(data), Title = "Author Co-Citation Network", type = "fruchterman", size = TRUE, edgesize = 2.5, labelsize = 1)
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE)
# Chunk 2
library(bibliometrix)
library(rprojroot)
library(ggplot2)
# Chunk 3
root_file <- find_rstudio_root_file()
setwd(root_file)
data <- convert2df("data/database1.bib", dbsource = "scopus", format = "bibtex")
# Chunk 4
# Set the working directory to locate files
setwd(find_rstudio_root_file())
# Convert bibliographic data from .bib format to a data frame
data <- convert2df("data/database1.bib", dbsource = "scopus", format = "bibtex")
# Chunk 5
# Perform a bibliometric analysis
result <- biblioAnalysis(data)
# Display a summary of the results
summary(result)
# Chunk 6
# Generate plots of the bibliometric analysis
plots <- plot(x = result)
root_file <- find_rstudio_root_file()
setwd(root_file)
data <- convert2df("data/database1.bib", dbsource = "scopus", format = "bibtex")
library(bibliometrix)
library(rprojroot)
library(ggplot2)
root_file <- find_rstudio_root_file()
setwd(root_file)
data <- convert2df("data/database1.bib", dbsource = "scopus", format = "bibtex")
# Set the working directory to locate files
setwd(find_rstudio_root_file())
# Convert bibliographic data from .bib format to a data frame
data <- convert2df("data/database1.bib", dbsource = "scopus", format = "bibtex")
# Perform a bibliometric analysis
result <- biblioAnalysis(data)
# Display a summary of the results
summary(result)
# Generate plots of the bibliometric analysis
plots <- plot(x = result)
# Perform conceptual structure analysis using keywords
CS <- conceptualStructure(data, field = "ID", method = "CA", minDegree = 3, clust = 4, stemming = FALSE, labelsize = 10, documents = nrow(data))
# Rename the author column (if necessary)
colnames(data)[colnames(data) == "AU"] <- "CR_AU"
# Create a network matrix for author co-citation
NetMatrix_citation_cc <- biblioNetwork(data, analysis = "co-citation", network = "authors", sep = ";")
# Plot the author co-citation network
co_citation = networkPlot(NetMatrix_citation_cc, normalize = "association", weighted = NULL, n = nrow(data), Title = "Author Co-Citation Network", type = "fruchterman", size = TRUE, edgesize = 2.5, labelsize = 1)
