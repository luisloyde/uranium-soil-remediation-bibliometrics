tiff("figures/keyword_co_occurrence_network.tif", width = 1000, height = 750, units = "px", res = 300, compression = "lzw")
# Generar el gráfico de la red de co-ocurrencias de palabras clave
keyword_co = networkPlot(NetMatrix_keyword_co, normalize = "association", weighted = NULL, n = nrow(data), Title = "Keyword Co-Occurrences", type = "fruchterman", size = TRUE, edgesize = 2.5, labelsize = 0.1)
# Cerrar el dispositivo de gráficos para guardar el archivo
dev.off()
# Create a network matrix for keyword co-occurrences
NetMatrix_keyword_co <- biblioNetwork(data, analysis = "co-occurrences", network = "keywords", sep = ";")
# Plot the keyword co-occurrence network
keyword_co = networkPlot(NetMatrix_keyword_co, normalize = "association", weighted = NULL, n = nrow(data), Title = "Keyword Co-Occurrences", type = "fruchterman", size = TRUE, edgesize = 2.5, labelsize = 1)
tiff("figures/keyword_co_occurrences_network.tif", width = 3500/300, height = 1500/300, units = "px", res = 300, compression = "lzw")
keyword_co = networkPlot(NetMatrix_keyword_co, normalize = "association", weighted = NULL, n = nrow(data), Title = "Keyword Co-Occurrences", type = "fruchterman", size = TRUE, edgesize = 2.5, labelsize = 1)
# Crear la matriz de la red de co-ocurrencias de palabras clave
NetMatrix_keyword_co <- biblioNetwork(data, analysis = "co-occurrences", network = "keywords", sep = ";")
# Abrir el dispositivo TIFF para guardar el archivo con un DPI de 300
tiff("figures/keyword_co_occurrence_network.tif", width = 1000/300, height = 750/300, units = "px", res = 300, compression = "lzw")
# Generar el gráfico de la red de co-ocurrencias de palabras clave
keyword_co = networkPlot(NetMatrix_keyword_co, normalize = "association", weighted = NULL, n = nrow(data), Title = "Keyword Co-Occurrences", type = "fruchterman", size = TRUE, edgesize = 2.5, labelsize = 1)
# Rename the author column (if necessary)
colnames(data)[colnames(data) == "AU"] <- "CR_AU"
# Create a network matrix for author co-citation
NetMatrix_citation_cc <- biblioNetwork(data, analysis = "co-citation", network = "authors", sep = ";")
# Plot the author co-citation network
co_citation = networkPlot(NetMatrix_citation_cc, normalize = "association", weighted = NULL, n = nrow(data), Title = "Author Co-Citation Network", type = "fruchterman", size = TRUE, edgesize = 2.5, labelsize = 1)
# Rename the author column (if necessary)
colnames(data)[colnames(data) == "AU"] <- "CR_AU"
# Create a network matrix for author co-citation
NetMatrix_citation_cc <- biblioNetwork(data, analysis = "co-citation", network = "authors", sep = ";")
# Plot the author co-citation network
co_citation = networkPlot(NetMatrix_citation_cc, normalize = "association", weighted = NULL, n = nrow(data), Title = "Author Co-Citation Network", type = "fruchterman", size = TRUE, edgesize = 2.5, labelsize = 1)
# Rename the author column (if necessary)
colnames(data)[colnames(data) == "AU"] <- "CR_AU"
# Create a network matrix for author co-citation
NetMatrix_citation_cc <- biblioNetwork(data, analysis = "co-citation", network = "authors", sep = ";")
# Plot the author co-citation network
co_citation = networkPlot(NetMatrix_citation_cc, normalize = "association", weighted = NULL, n = nrow(data), Title = "Author Co-Citation Network", type = "fruchterman", size = TRUE, edgesize = 2.5, labelsize = 1)
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE)
# Chunk 2
library(bibliometrix)
library(rprojroot)
library(ggplot2)
# Chunk 3
root_file <- find_rstudio_root_file()
setwd(root_file)
data <- convert2df("data/database1.bib", dbsource = "scopus", format = "bibtex")
# Chunk 4
# Set the working directory to locate files
setwd(find_rstudio_root_file())
# Convert bibliographic data from .bib format to a data frame
data <- convert2df("data/database1.bib", dbsource = "scopus", format = "bibtex")
# Chunk 5
# Perform a bibliometric analysis
result <- biblioAnalysis(data)
# Display a summary of the results
summary(result)
# Chunk 6
# Generate plots of the bibliometric analysis
plots <- plot(x = result)
root_file <- find_rstudio_root_file()
setwd(root_file)
data <- convert2df("data/database1.bib", dbsource = "scopus", format = "bibtex")
library(bibliometrix)
library(rprojroot)
library(ggplot2)
root_file <- find_rstudio_root_file()
setwd(root_file)
data <- convert2df("data/database1.bib", dbsource = "scopus", format = "bibtex")
# Set the working directory to locate files
setwd(find_rstudio_root_file())
# Convert bibliographic data from .bib format to a data frame
data <- convert2df("data/database1.bib", dbsource = "scopus", format = "bibtex")
# Perform a bibliometric analysis
result <- biblioAnalysis(data)
# Display a summary of the results
summary(result)
# Generate plots of the bibliometric analysis
plots <- plot(x = result)
# Perform conceptual structure analysis using keywords
CS <- conceptualStructure(data, field = "ID", method = "CA", minDegree = 3, clust = 4, stemming = FALSE, labelsize = 10, documents = nrow(data))
# Rename the author column (if necessary)
colnames(data)[colnames(data) == "AU"] <- "CR_AU"
# Create a network matrix for author co-citation
NetMatrix_citation_cc <- biblioNetwork(data, analysis = "co-citation", network = "authors", sep = ";")
# Plot the author co-citation network
co_citation = networkPlot(NetMatrix_citation_cc, normalize = "association", weighted = NULL, n = nrow(data), Title = "Author Co-Citation Network", type = "fruchterman", size = TRUE, edgesize = 2.5, labelsize = 1)
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE)
# Chunk 2
library(bibliometrix)
library(rprojroot)
library(ggplot2)
# Chunk 3
root_file <- find_rstudio_root_file()
setwd(root_file)
data <- convert2df("data/database1.bib", dbsource = "scopus", format = "bibtex")
# Chunk 4
# Set the working directory to locate files
setwd(find_rstudio_root_file())
# Convert bibliographic data from .bib format to a data frame
data <- convert2df("data/database1.bib", dbsource = "scopus", format = "bibtex")
# Chunk 5
# Perform a bibliometric analysis
result <- biblioAnalysis(data)
# Display a summary of the results
summary(result)
# Chunk 6
# Generate plots of the bibliometric analysis
plots <- plot(x = result)
lapply(seq_along(plots), function(i) {
ggsave(
filename = paste0("figures/plot_analysis_", i, ".tif"),
plot = plots[[i]],
width = 3500 / 300,
height = 1500 / 300,
units = "in",
dpi = 300,
device = "tiff",
compression = "lzw")})
# Chunk 7
# Perform conceptual structure analysis using keywords
CS <- conceptualStructure(data, field = "ID", method = "CA", minDegree = 3, clust = 4, stemming = FALSE, labelsize = 10, documents = nrow(data))
plots <- list(
graph_terms = CS$graph_terms,
graph_documents_Contrib = CS$graph_documents_Contrib,
graph_documents_TC = CS$graph_documents_TC
)
if (!dir.exists("figures")) {
dir.create("figures")
}
lapply(names(plots), function(name) {
ggsave(
filename = paste0("figures/", name, ".tif"),
plot = plots[[name]],
width = 3500 / 300,
height = 1500 / 300,
units = "in",
dpi = 300,
device = "tiff",
compression = "lzw"
)
})
# Chunk 8
# Rename the author column (if necessary)
colnames(data)[colnames(data) == "AU"] <- "CR_AU"
# Create a network matrix for author co-citation
NetMatrix_citation_cc <- biblioNetwork(data, analysis = "co-citation", network = "authors", sep = ";")
# Plot the author co-citation network
co_citation = networkPlot(NetMatrix_citation_cc, normalize = "association", weighted = NULL, n = nrow(data), Title = "Author Co-Citation Network", type = "fruchterman", size = TRUE, edgesize = 2.5, labelsize = 1)
# Chunk 9
# # Create a network matrix for keyword co-occurrences
NetMatrix_keyword_co <- biblioNetwork(data, analysis = "co-occurrences", network = "keywords", sep = ";")
# Open device for saving tif
tiff("figures/keyword_co_occurrence_network.tif", width = 2850, height = 2850, units = "px", res = 300, compression = "lzw")
# Plot the keyword co-occurrence network
keyword_co = networkPlot(NetMatrix_keyword_co, normalize = "association", weighted = NULL, n = nrow(data), Title = "Keyword Co-Occurrences", type = "fruchterman", size = TRUE, edgesize = 2.5, labelsize = 1)
# Close device
dev.off()
library(bibliometrix)
library(rprojroot)
library(ggplot2)
root_file <- find_rstudio_root_file()
setwd(root_file)
data <- convert2df("data/database3.bib", dbsource = "scopus", format = "bibtex")
# Set the working directory to locate files
setwd(find_rstudio_root_file())
# Convert bibliographic data from .bib format to a data frame
data <- convert2df("data/database1.bib", dbsource = "scopus", format = "bibtex")
# Perform a bibliometric analysis
result <- biblioAnalysis(data)
# Display a summary of the results
summary(result)
# Generate plots of the bibliometric analysis
plots <- plot(x = result)
lapply(seq_along(plots), function(i) {
ggsave(
filename = paste0("figures/plot_analysis_", i, ".tif"),
plot = plots[[i]],
width = 3500 / 300,
height = 1500 / 300,
units = "in",
dpi = 300,
device = "tiff",
compression = "lzw")})
# Set the working directory to locate files
setwd(find_rstudio_root_file())
# Convert bibliographic data from .bib format to a data frame
data <- convert2df("data/database3.bib", dbsource = "scopus", format = "bibtex")
root_file <- find_rstudio_root_file()
setwd(root_file)
data <- convert2df("data/database3.bib", dbsource = "scopus", format = "bibtex")
# Set the working directory to locate files
setwd(find_rstudio_root_file())
# Convert bibliographic data from .bib format to a data frame
data <- convert2df("data/database3.bib", dbsource = "scopus", format = "bibtex")
# Perform a bibliometric analysis
result <- biblioAnalysis(data)
# Display a summary of the results
summary(result)
# Generate plots of the bibliometric analysis
plots <- plot(x = result)
# Generate plots of the bibliometric analysis
plots <- plot(x = result)
# Perform conceptual structure analysis using keywords
CS <- conceptualStructure(data, field = "ID", method = "CA", minDegree = 3, clust = 4, stemming = FALSE, labelsize = 10, documents = nrow(data))
plots <- list(
graph_terms = CS$graph_terms,
graph_documents_Contrib = CS$graph_documents_Contrib,
graph_documents_TC = CS$graph_documents_TC
)
if (!dir.exists("figures")) {
dir.create("figures")
}
lapply(names(plots), function(name) {
ggsave(
filename = paste0("figures/", name, ".tif"),
plot = plots[[name]],
width = 3500 / 300,
height = 1500 / 300,
units = "in",
dpi = 300,
device = "tiff",
compression = "lzw"
)
})
# Rename the author column (if necessary)
colnames(data)[colnames(data) == "AU"] <- "CR_AU"
# Create a network matrix for author co-citation
NetMatrix_citation_cc <- biblioNetwork(data, analysis = "co-citation", network = "authors", sep = ";")
# Plot the author co-citation network
co_citation = networkPlot(NetMatrix_citation_cc, normalize = "association", weighted = NULL, n = nrow(data), Title = "Author Co-Citation Network", type = "fruchterman", size = TRUE, edgesize = 2.5, labelsize = 1)
# # Create a network matrix for keyword co-occurrences
NetMatrix_keyword_co <- biblioNetwork(data, analysis = "co-occurrences", network = "keywords", sep = ";")
# Open device for saving tif
tiff("figures/keyword_co_occurrence_network.tif", width = 2850, height = 2850, units = "px", res = 300, compression = "lzw")
# Plot the keyword co-occurrence network
keyword_co = networkPlot(NetMatrix_keyword_co, normalize = "association", weighted = NULL, n = nrow(data), Title = "Keyword Co-Occurrences", type = "fruchterman", size = TRUE, edgesize = 2.5, labelsize = 1)
# Close device
dev.off()
# Set the working directory to locate files
setwd(find_rstudio_root_file())
# Convert bibliographic data from .bib format to a data frame
data <- convert2df("data/database3.bib", dbsource = "scopus", format = "bibtex")
# Set the working directory to locate files
setwd(find_rstudio_root_file())
# Convert bibliographic data from .bib format to a data frame
data <- convert2df("data/database3.bib", dbsource = "scopus", format = "bibtex")
View(data)
# Perform a bibliometric analysis
result <- biblioAnalysis(data)
# Display a summary of the results
summary(result)
# Generate plots of the bibliometric analysis
plots <- plot(x = result)
# Perform conceptual structure analysis using keywords
CS <- conceptualStructure(data, field = "ID", method = "CA", minDegree = 3, clust = 4, stemming = FALSE, labelsize = 10, documents = nrow(data))
plots <- list(
graph_terms = CS$graph_terms,
graph_documents_Contrib = CS$graph_documents_Contrib,
graph_documents_TC = CS$graph_documents_TC
)
if (!dir.exists("figures")) {
dir.create("figures")
}
lapply(names(plots), function(name) {
ggsave(
filename = paste0("figures/", name, ".tif"),
plot = plots[[name]],
width = 3500 / 300,
height = 1500 / 300,
units = "in",
dpi = 300,
device = "tiff",
compression = "lzw"
)
})
# Set the working directory to locate files
setwd(find_rstudio_root_file())
# Convert bibliographic data from .bib format to a data frame
data <- convert2df("data/database1.bib", dbsource = "scopus", format = "bibtex")
# Perform a bibliometric analysis
result <- biblioAnalysis(data)
# Display a summary of the results
summary(result)
# Generate plots of the bibliometric analysis
plots <- plot(x = result)
lapply(seq_along(plots), function(i) {
ggsave(
filename = paste0("figures/plot_analysis_", i, ".tif"),
plot = plots[[i]],
width = 3500 / 300,
height = 1500 / 300,
units = "in",
dpi = 300,
device = "tiff",
compression = "lzw")})
# Set the working directory to locate files
setwd(find_rstudio_root_file())
# Convert bibliographic data from .bib format to a data frame
data <- convert2df("data/database3.bib", dbsource = "scopus", format = "bibtex")
library(bibliometrix)
library(rprojroot)
library(ggplot2)
root_file <- find_rstudio_root_file()
setwd(root_file)
data <- convert2df("data/database3.bib", dbsource = "scopus", format = "bibtex")
# Set the working directory to locate files
setwd(find_rstudio_root_file())
# Convert bibliographic data from .bib format to a data frame
data <- convert2df("data/database3.bib", dbsource = "scopus", format = "bibtex")
# Perform a bibliometric analysis
result <- biblioAnalysis(data)
# Display a summary of the results
summary(result)
# Generate plots of the bibliometric analysis
plots <- plot(x = result)
# Generate plots of the bibliometric analysis
plots <- plot(x = result)
# Set the working directory to locate files
setwd(find_rstudio_root_file())
# Convert bibliographic data from .bib format to a data frame
data <- convert2df("data/database3.bib", dbsource = "scopus", format = "bibtex")
# Perform a bibliometric analysis
result <- biblioAnalysis(data)
# Display a summary of the results
summary(result)
# Generate plots of the bibliometric analysis
plots <- plot(x = result)
# Set the working directory to locate files
setwd(find_rstudio_root_file())
# Convert bibliographic data from .bib format to a data frame
data <- convert2df("data/database2.bib", dbsource = "scopus", format = "bibtex")
# Perform a bibliometric analysis
result <- biblioAnalysis(data)
# Display a summary of the results
summary(result)
# Generate plots of the bibliometric analysis
plots <- plot(x = result)
lapply(seq_along(plots), function(i) {
ggsave(
filename = paste0("figures/plot_analysis_", i, ".tif"),
plot = plots[[i]],
width = 3500 / 300,
height = 1500 / 300,
units = "in",
dpi = 300,
device = "tiff",
compression = "lzw")})
# Set the working directory to locate files
setwd(find_rstudio_root_file())
# Convert bibliographic data from .bib format to a data frame
data <- convert2df("data/database3.bib", dbsource = "scopus", format = "bibtex")
# Perform a bibliometric analysis
result <- biblioAnalysis(data)
# Display a summary of the results
summary(result)
# Generate plots of the bibliometric analysis
plots <- plot(x = result)
head(data) # Muestra las primeras filas del dataframe
str(data)  # Muestra la estructura del dataframe
summary(data) # Proporciona un resumen estadístico
results <- biblioAnalysis(data)
summary(results)
data <- na.omit(data) # Elimina filas con valores NA
View(data)
top_authors <- authorProdOverTime(results)
# Generate plots of the bibliometric analysis
plots <- plot(x = result, k=10)
# Generate plots of the bibliometric analysis
plots <- plot(x = result, k=1)
# Generate plots of the bibliometric analysis
plots <- plot(x = result, k=2)
lapply(seq_along(plots), function(i) {
ggsave(
filename = paste0("figures/plot_analysis_", i, ".tif"),
plot = plots[[i]],
width = 3500 / 300,
height = 1500 / 300,
units = "in",
dpi = 300,
device = "tiff",
compression = "lzw")})
# Set the working directory to locate files
setwd(find_rstudio_root_file())
# Convert bibliographic data from .bib format to a data frame
data <- convert2df("data/database3.bib", dbsource = "scopus", format = "bibtex")
# Perform a bibliometric analysis
result <- biblioAnalysis(data)
# Display a summary of the results
summary(result)
# Generate plots of the bibliometric analysis
plots <- plot(x = result, k=2)
lapply(seq_along(plots), function(i) {
ggsave(
filename = paste0("figures/plot_analysis_", i, ".tif"),
plot = plots[[i]],
width = 3500 / 300,
height = 1500 / 300,
units = "in",
dpi = 300,
device = "tiff",
compression = "lzw")})
# Generate plots of the bibliometric analysis
plots <- plot(x = result, k=3)
lapply(seq_along(plots), function(i) {
ggsave(
filename = paste0("figures/plot_analysis_", i, ".tif"),
plot = plots[[i]],
width = 3500 / 300,
height = 1500 / 300,
units = "in",
dpi = 300,
device = "tiff",
compression = "lzw")})
# Generate plots of the bibliometric analysis
plots <- plot(x = result, k=4)
# Generate plots of the bibliometric analysis
plots <- plot(x = result, k=3)
lapply(seq_along(plots), function(i) {
ggsave(
filename = paste0("figures/plot_analysis_", i, ".tif"),
plot = plots[[i]],
width = 3500 / 300,
height = 1500 / 300,
units = "in",
dpi = 300,
device = "tiff",
compression = "lzw")})
# Generate plots of the bibliometric analysis
plots <- plot(x = result, pause=TRUE)
# Generate plots of the bibliometric analysis
plots <- plot(x = result, k=3)
lapply(seq_along(plots), function(i) {
ggsave(
filename = paste0("figures/plot_analysis_", i, ".tif"),
plot = plots[[i]],
width = 3500 / 300,
height = 1500 / 300,
units = "in",
dpi = 300,
device = "tiff",
compression = "lzw")})
# Generate plots of the bibliometric analysis
plots <- plot(x = result, k=4)
# Generate plots of the bibliometric analysis
plots <- plot(x = result, k=3)
lapply(seq_along(plots), function(i) {
ggsave(
filename = paste0("figures/plot_analysis_", i, ".tif"),
plot = plots[[i]],
width = 3500 / 300,
height = 1500 / 300,
units = "in",
dpi = 300,
device = "tiff",
compression = "lzw")})
# Perform conceptual structure analysis using keywords
CS <- conceptualStructure(data, field = "ID", method = "CA", minDegree = 3, clust = 4, stemming = FALSE, labelsize = 10, documents = nrow(data))
plots <- list(
graph_terms = CS$graph_terms,
graph_documents_Contrib = CS$graph_documents_Contrib,
graph_documents_TC = CS$graph_documents_TC
)
if (!dir.exists("figures")) {
dir.create("figures")
}
lapply(names(plots), function(name) {
ggsave(
filename = paste0("figures/", name, ".tif"),
plot = plots[[name]],
width = 3500 / 300,
height = 1500 / 300,
units = "in",
dpi = 300,
device = "tiff",
compression = "lzw"
)
})
# Rename the author column (if necessary)
colnames(data)[colnames(data) == "AU"] <- "CR_AU"
# Create a network matrix for author co-citation
NetMatrix_citation_cc <- biblioNetwork(data, analysis = "co-citation", network = "authors", sep = ";")
# Plot the author co-citation network
co_citation = networkPlot(NetMatrix_citation_cc, normalize = "association", weighted = NULL, n = nrow(data), Title = "Author Co-Citation Network", type = "fruchterman", size = TRUE, edgesize = 2.5, labelsize = 1)
knitr::opts_chunk$set(echo = TRUE)
library(bibliometrix)
library(rprojroot)
library(ggplot2)
root_file <- find_rstudio_root_file()
setwd(root_file)
data <- convert2df("data/database3.bib", dbsource = "scopus", format = "bibtex")
# Set the working directory to locate files
setwd(find_rstudio_root_file())
# Convert bibliographic data from .bib format to a data frame
data <- convert2df("data/database3.bib", dbsource = "scopus", format = "bibtex")
# Perform a bibliometric analysis
result <- biblioAnalysis(data)
# Display a summary of the results
summary(result)
# Generate plots of the bibliometric analysis
plots <- plot(x = result, k=3)
lapply(seq_along(plots), function(i) {
ggsave(
filename = paste0("figures/plot_analysis_", i, ".tif"),
plot = plots[[i]],
width = 3500 / 300,
height = 1500 / 300,
units = "in",
dpi = 300,
device = "tiff",
compression = "lzw")})
View(result)
View(result[["AuthorsFrac"]])
